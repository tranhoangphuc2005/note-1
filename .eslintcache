[{"/Users/macair/Desktop/note/src/index.js":"1","/Users/macair/Desktop/note/src/App.js":"2","/Users/macair/Desktop/note/src/reportWebVitals.js":"3","/Users/macair/Desktop/note/src/Components/Add/Add.js":"4","/Users/macair/Desktop/note/src/Components/Note/Note.js":"5"},{"size":521,"mtime":1610275486231,"results":"6","hashOfConfig":"7"},{"size":3047,"mtime":1611388641325,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1610271350182,"results":"9","hashOfConfig":"7"},{"size":371,"mtime":1611238779523,"results":"10","hashOfConfig":"7"},{"size":4386,"mtime":1611387142365,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"7gq40h",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"/Users/macair/Desktop/note/src/index.js",[],["24","25"],"/Users/macair/Desktop/note/src/App.js",["26","27"],"/Users/macair/Desktop/note/src/reportWebVitals.js",[],"/Users/macair/Desktop/note/src/Components/Add/Add.js",[],"/Users/macair/Desktop/note/src/Components/Note/Note.js",["28","29","30","31","32"],"import React, { useState } from \"react\";\nimport { Grid, Icon, Card, Button, Select } from \"semantic-ui-react\";\nimport marked from \"marked\";\nimport \"./Note.css\";\nimport axios from \"axios\";\n\nconst countryOptions = [\n  { key: \"af\", value: \"af\", text: \"Afghanistan\" },\n  { key: \"ax\", value: \"ax\", text: \"Aland Islands\" },\n  { key: \"al\", value: \"al\", text: \"Albania\" },\n  { key: \"dz\", value: \"dz\", text: \"Algeria\" },\n  { key: \"as\", value: \"as\", text: \"American Samoa\" },\n  { key: \"ad\", value: \"ad\", text: \"Andorra\" },\n  { key: \"ao\", value: \"ao\", text: \"Angola\" },\n  { key: \"ai\", value: \"ai\", text: \"Anguilla\" },\n  { key: \"ag\", value: \"ag\", text: \"Antigua\" },\n  { key: \"ar\", value: \"ar\", text: \"Argentina\" },\n  { key: \"am\", value: \"am\", text: \"Armenia\" },\n  { key: \"aw\", value: \"aw\", text: \"Aruba\" },\n  { key: \"au\", value: \"au\", text: \"Australia\" },\n  { key: \"at\", value: \"at\", text: \"Austria\" },\n  { key: \"az\", value: \"az\", text: \"Azerbaijan\" },\n  { key: \"bs\", value: \"bs\", text: \"Bahamas\" },\n  { key: \"bh\", value: \"bh\", text: \"Bahrain\" },\n  { key: \"bd\", value: \"bd\", text: \"Bangladesh\" },\n  { key: \"bb\", value: \"bb\", text: \"Barbados\" },\n  { key: \"by\", value: \"by\", text: \"Belarus\" },\n  { key: \"be\", value: \"be\", text: \"Belgium\" },\n  { key: \"bz\", value: \"bz\", text: \"Belize\" },\n  { key: \"bj\", value: \"bj\", text: \"Benin\" },\n];\n\nconst Note = ({ notes, deleteNote, editNote, submitNote, isBookmark }) => {\n  const [edit, setEdit] = useState(false);\n  const [textarea, setTextarea] = useState(\"\");\n\n  let api = \"http://localhost:5000/notes\";\n  const createMarkup = (note) => {\n    return { __html: note };\n  };\n\n  return (\n    <Grid columns={3} padded>\n      <Grid.Row>\n        {notes.map((note) => (\n          <Grid.Column key={note.id}>\n            <Card className={\"content-css \"}>\n              <div className={\"title\"}>\n                <Card.Content header={note.title} />\n                <div className={\"icon\"}>\n                  <Select placeholder=\"Select color\" options={countryOptions} />\n                  <Button\n                    basic\n                    color=\"red\"\n                    onClick={() => {\n                      deleteNote(note.id);\n                    }}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      setTextarea(note.content);\n                      editNote(note);\n                    }}\n                  >\n                    <Icon name=\"edit outline\" />\n                  </Button>\n                  <Button\n                    color=\"blue\"\n                    onClick={() => {\n                      isBookmark(note.id, note.bookmark);\n                    }}\n                  >\n                    {note.bookmark === false ? (\n                      <Icon name=\"bookmark outline\" />\n                    ) : (\n                      <Icon name=\"bookmark\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n              <Card.Content description={note.content}>\n                {!note.open ? (\n                  <div\n                    dangerouslySetInnerHTML={{ __html: marked(note.content) }}\n                  ></div>\n                ) : (\n                  <form\n                    onSubmit={async (e) => {\n                      e.preventDefault();\n                      // let res = await axios.put(`${api}/${note.id}`, {\n                      //   ...note,\n                      //   content: textarea,\n                      // });\n                      // if (res.status === 200) {\n                      //   setEdit(false);\n                      // }\n                      let newData = { ...note, content: textarea };\n                      submitNote(newData);\n                    }}\n                  >\n                    <textarea\n                      value={textarea}\n                      onChange={(e) => {\n                        setTextarea(e.target.value);\n                      }}\n                      className={\"textarea\"}\n                    >\n                      textarea\n                    </textarea>\n                    <button type=\"submit\"> submit</button>\n                  </form>\n                )}\n              </Card.Content>\n            </Card>\n          </Grid.Column>\n        ))}\n      </Grid.Row>\n    </Grid>\n  );\n};\n\nexport default Note;\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":6,"column":26,"nodeType":"39","messageId":"40","endLine":6,"endColumn":31},{"ruleId":"41","severity":1,"message":"42","line":34,"column":20,"nodeType":"43","messageId":"44","endLine":34,"endColumn":22},{"ruleId":"37","severity":1,"message":"45","line":5,"column":8,"nodeType":"39","messageId":"40","endLine":5,"endColumn":13},{"ruleId":"37","severity":1,"message":"46","line":34,"column":10,"nodeType":"39","messageId":"40","endLine":34,"endColumn":14},{"ruleId":"37","severity":1,"message":"47","line":34,"column":16,"nodeType":"39","messageId":"40","endLine":34,"endColumn":23},{"ruleId":"37","severity":1,"message":"48","line":37,"column":7,"nodeType":"39","messageId":"40","endLine":37,"endColumn":10},{"ruleId":"37","severity":1,"message":"49","line":38,"column":9,"nodeType":"39","messageId":"40","endLine":38,"endColumn":21},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'axios' is defined but never used.","'edit' is assigned a value but never used.","'setEdit' is assigned a value but never used.","'api' is assigned a value but never used.","'createMarkup' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]